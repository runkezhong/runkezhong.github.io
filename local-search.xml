<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/02/28/%E4%BD%BF%E7%94%A8peft%E8%BF%9B%E8%A1%8CFine%20Tuning/"/>
    <url>/2025/02/28/%E4%BD%BF%E7%94%A8peft%E8%BF%9B%E8%A1%8CFine%20Tuning/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="title-使用peft进行Fine-Tuning（大模型微调）tags-Transformer-peft-huggingface-index-img-img-peft-pngdate-2025-02-25"><a href="#title-使用peft进行Fine-Tuning（大模型微调）tags-Transformer-peft-huggingface-index-img-img-peft-pngdate-2025-02-25" class="headerlink" title="title:使用peft进行Fine Tuning（大模型微调）tags:[Transformer,peft,huggingface]index_img:&#x2F;img&#x2F;peft.pngdate:2025-02-25"></a>title:使用peft进行Fine Tuning（大模型微调）<br>tags:[Transformer,peft,huggingface]<br>index_img:&#x2F;img&#x2F;peft.png<br>date:2025-02-25</h2><h3 id="1-大模型微调简介"><a href="#1-大模型微调简介" class="headerlink" title="1. 大模型微调简介"></a>1. 大模型微调简介</h3><p>大模型（Large Language Models, LLMs）通常是指模型参数量极大的深度学习模型，能够理解和生成人类语言，在大量的文本数据上进行训练，可以执行广泛的任务。</p><p>我们首先会想为什么要进行大模型微调，这是因为大模型的训练成本极其高昂，同时大模型的知识库有其滞后性，以及希望在特定任务上的能力能够得到提升。为此，<code>微调（Fine-tuning）</code>成为了一种重要手段，其借鉴于计算机视觉模型的迁移学习，这是一个非常伟大的想法。总之，通过对预训练模型进行针对性调整，我们可以使其适应具体应用场景，那么更新大模型知识的方法除了微调这一种，还有一种叫RAG（增强检索生成），这就是后话了。</p><h3 id="2-微调的主要方法"><a href="#2-微调的主要方法" class="headerlink" title="2. 微调的主要方法"></a>2. 微调的主要方法</h3><h4 id="2-1-全量微调（Full-Fine-tuning）"><a href="#2-1-全量微调（Full-Fine-tuning）" class="headerlink" title="2.1 全量微调（Full Fine-tuning）"></a>2.1 全量微调（Full Fine-tuning）</h4><ul><li>描述：对预训练模型的所有参数都进行更新</li><li>优点：灵活性高</li><li>缺点：需要较大的计算资源</li><li>使用场景：目标任务数据量大且计算资源充足（一般不使用）</li></ul><h4 id="2-2-指令微调（Instruction-Tuning）"><a href="#2-2-指令微调（Instruction-Tuning）" class="headerlink" title="2.2 指令微调（Instruction Tuning）"></a>2.2 指令微调（Instruction Tuning）</h4><ul><li>描述：用在特定任务任务下的明确指令和示例也对大模型进行微调，不更新模型知识</li><li>优点：专注于特定任务的微调，保留了模型的基础能力</li><li>缺点：限制较大，无法充分发挥模型能力</li></ul><h4 id="2-3-参数高效微调（Parameter-Efficient-Fine-tuning，PEFT）"><a href="#2-3-参数高效微调（Parameter-Efficient-Fine-tuning，PEFT）" class="headerlink" title="2.3 参数高效微调（Parameter-Efficient Fine-tuning，PEFT）"></a>2.3 参数高效微调（Parameter-Efficient Fine-tuning，PEFT）</h4><p>参数高效微调有以下几种，我们后续会主要实战lora微调，其他的将在后续的文章的里更新。</p><h5 id="2-3-1-Adapter-Tuning"><a href="#2-3-1-Adapter-Tuning" class="headerlink" title="2.3.1 Adapter Tuning"></a>2.3.1 Adapter Tuning</h5><ul><li>描述：在模型的每一层插入小型的适配模块，仅训练这些模块的参数</li></ul><h5 id="2-3-2-Prompt-Tuning"><a href="#2-3-2-Prompt-Tuning" class="headerlink" title="2.3.2 Prompt Tuning"></a>2.3.2 Prompt Tuning</h5><ul><li>描述：通过优化提示（prompt）而非模型参数来引导模型输出</li></ul><h5 id="2-3-3-Prefix-Tuning"><a href="#2-3-3-Prefix-Tuning" class="headerlink" title="2.3.3 Prefix Tuning"></a>2.3.3 Prefix Tuning</h5><ul><li>描述：在模型输入前添加一个连续的且任务特定的向量序列称之为prefix，固定PLM的所有参数，只更新优化特定的任务的prefix</li></ul><h5 id="2-3-4-LoRA-（Low-Rank-Adaptation）"><a href="#2-3-4-LoRA-（Low-Rank-Adaptation）" class="headerlink" title="2.3.4 LoRA （Low-Rank Adaptation）"></a>2.3.4 LoRA （Low-Rank Adaptation）</h5><ul><li>描述：通过低秩分解的方式更新模型权重，显著减少了需要训练的参数数量。</li></ul><h3 id="3-微调的关键步骤"><a href="#3-微调的关键步骤" class="headerlink" title="3. 微调的关键步骤"></a>3. 微调的关键步骤</h3><h4 id="3-1-数据准备"><a href="#3-1-数据准备" class="headerlink" title="3.1 数据准备"></a>3.1 数据准备</h4><p>我们要收集与目标任务相关的标注数据。本篇文章将使用<code>alpaca_gpt4_data_zh.json</code>数据集进行微调。</p><h4 id="3-2-模型选择"><a href="#3-2-模型选择" class="headerlink" title="3.2 模型选择"></a>3.2 模型选择</h4><p>我们要选择适合任务需求的预训练模型，其中Qwen系列的模型在各个尺寸上的都比较齐全，为方便演示本次演示将使用<code>qwen2.5-0.5b</code>。</p><h4 id="3-3-超参数设置"><a href="#3-3-超参数设置" class="headerlink" title="3.3 超参数设置"></a>3.3 超参数设置</h4><p>我们要确定学习率、批量大小、训练轮数等超参数，但这些都需要我们进行大量的实践，也就是说，什么样的超参数会更好，更多的是根据实验人员的经验来设置的。</p><h4 id="3-4-训练与验证"><a href="#3-4-训练与验证" class="headerlink" title="3.4 训练与验证"></a>3.4 训练与验证</h4><p>在训练集上进行微调，此次训练会使用huggingface的库<code>peft</code>。</p><h4 id="3-5-模型评估与部署"><a href="#3-5-模型评估与部署" class="headerlink" title="3.5 模型评估与部署"></a>3.5 模型评估与部署</h4><p>在测试集上全面评估模型性能，确保其满足实际应用需求。</p><h3 id="4-微调实战"><a href="#4-微调实战" class="headerlink" title="4 微调实战"></a>4 微调实战</h3><h4 id="4-1-实验环境"><a href="#4-1-实验环境" class="headerlink" title="4.1 实验环境"></a>4.1 实验环境</h4><ul><li>NVIDIA RTX 3060 （12GB）显存</li><li>transformers&#x3D;&#x3D;4.46.3</li><li>peft&#x3D;&#x3D;0.14.0</li><li>datasets</li></ul><h4 id="4-2-安装依赖"><a href="#4-2-安装依赖" class="headerlink" title="4.2 安装依赖"></a>4.2 安装依赖</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install transformers<br>pip install peft<br></code></pre></td></tr></table></figure><h4 id="4-3-准备数据集"><a href="#4-3-准备数据集" class="headerlink" title="4.3 准备数据集"></a>4.3 准备数据集</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset<br>dataset = load_dataset(<span class="hljs-string">&#x27;json&#x27;</span>, data_files=<span class="hljs-string">&#x27;alpaca_gpt4_data_zh.json&#x27;</span>)<br><span class="hljs-comment"># dataset[&quot;train&quot;].save_to_disk(&quot;alpaca_gpt4_data_zh&quot;)</span><br>dataset = dataset[<span class="hljs-string">&quot;train&quot;</span>].train_test_split(test_size=<span class="hljs-number">0.1</span>)<br></code></pre></td></tr></table></figure><h4 id="4-4-加载预训练模型和分词器"><a href="#4-4-加载预训练模型和分词器" class="headerlink" title="4.4 加载预训练模型和分词器"></a>4.4 加载预训练模型和分词器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 模型下载</span><br><span class="hljs-keyword">from</span> modelscope <span class="hljs-keyword">import</span> snapshot_download<br>model_dir = snapshot_download(<span class="hljs-string">&#x27;Qwen/Qwen2.5-0.5B-Instruct&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> transformers<br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, AutoModelForCausalLM<br><br>tokenizer = AutoTokenizer.from_pretrained(model_dir)<br><span class="hljs-comment"># 设置精度为float16</span><br>model = AutoModelForCausalLM.from_pretrained(model_dir, torch_dtype=torch.float16)<br><span class="hljs-comment"># 将模型参数迁移到GPU</span><br>model = model.cuda()<br><span class="hljs-comment"># 打印模型结构</span><br><span class="hljs-built_in">print</span>(model)<br></code></pre></td></tr></table></figure><h4 id="4-5-配置LoRA"><a href="#4-5-配置LoRA" class="headerlink" title="4.5 配置LoRA"></a>4.5 配置LoRA</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> peft <span class="hljs-keyword">import</span> LoraConfig, get_peft_model, set_peft_model_state_dict, get_peft_model_state_dict, TaskType<br>lora_r = <span class="hljs-number">32</span><br>lora_alpha=<span class="hljs-number">16</span><br>target_modules=[<span class="hljs-string">&quot;q_proj&quot;</span>, <span class="hljs-string">&quot;k_proj&quot;</span>, <span class="hljs-string">&quot;v_proj&quot;</span>]<br>loraconfig = LoraConfig(<br>    r=lora_r,<br>    lora_alpha=<span class="hljs-number">16</span>,<br>    target_modules=target_modules,<br>    task_type=TaskType.CAUSAL_LM<br>)<br>model = get_peft_model(model,loraconfig)<br></code></pre></td></tr></table></figure><h4 id="4-6-数据预处理"><a href="#4-6-数据预处理" class="headerlink" title="4.6 数据预处理"></a>4.6 数据预处理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_tokenize</span>(<span class="hljs-params">one</span>):<br>    MAX_LENGTH = <span class="hljs-number">256</span><br>    input_ids,attention_mask,labels = [],[],[]<br>    instruction = tokenizer(<span class="hljs-string">&quot;\n&quot;</span>.join([<span class="hljs-string">&quot;Human: &quot;</span>+ one[<span class="hljs-string">&quot;instruction&quot;</span>],one[<span class="hljs-string">&quot;input&quot;</span>]]).strip() + <span class="hljs-string">&quot;\n\nAssistant: &quot;</span>)<br>    response = tokenizer(one[<span class="hljs-string">&quot;output&quot;</span>] + tokenizer.eos_token)<br>    input_ids = instruction[<span class="hljs-string">&quot;input_ids&quot;</span>] + response[<span class="hljs-string">&quot;input_ids&quot;</span>]<br>    attention_mask = instruction[<span class="hljs-string">&quot;attention_mask&quot;</span>] + response[<span class="hljs-string">&quot;attention_mask&quot;</span>]<br>    labels = [-<span class="hljs-number">100</span>] * <span class="hljs-built_in">len</span>(instruction[<span class="hljs-string">&quot;input_ids&quot;</span>]) + response[<span class="hljs-string">&quot;input_ids&quot;</span>]<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(input_ids) &gt; MAX_LENGTH:<br>        input_ids = input_ids[:MAX_LENGTH]<br>        attention_mask = attention_mask[:MAX_LENGTH]<br>        labels = labels[:MAX_LENGTH]<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-string">&quot;input_ids&quot;</span>: input_ids,<br>        <span class="hljs-string">&quot;attention_mask&quot;</span>: attention_mask,<br>        <span class="hljs-string">&quot;labels&quot;</span>: labels<br>    &#125;<br><br>tokenizer_dataset = dataset.<span class="hljs-built_in">map</span>(generate_tokenize, remove_columns=dataset[<span class="hljs-string">&#x27;train&#x27;</span>].column_names)<br>train_data = tokenizer_dataset[<span class="hljs-string">&#x27;train&#x27;</span>]<br>val_data = tokenizer_dataset[<span class="hljs-string">&#x27;test&#x27;</span>]<br></code></pre></td></tr></table></figure><h4 id="4-7-微调模型"><a href="#4-7-微调模型" class="headerlink" title="4.7 微调模型"></a>4.7 微调模型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TrainingArguments, Trainer, DataCollatorForSeq2Seq<br><br>args = TrainingArguments(<br>    output_dir=<span class="hljs-string">&quot;./lora_ft&quot;</span>,<br>    per_device_train_batch_size=<span class="hljs-number">8</span>,<br>    logging_steps=<span class="hljs-number">10</span>,<br>    num_train_epochs=<span class="hljs-number">1</span>,<br>    fp16=<span class="hljs-literal">True</span>,<br>)<br><br>trainer = Trainer(<br>    model=model,<br>    args=args,<br>    train_dataset=train_data,<br>    data_collator=DataCollatorForSeq2Seq(tokenizer=tokenizer, padding=<span class="hljs-literal">True</span>),<br>)<br><br>trainer.train()<br></code></pre></td></tr></table></figure><h4 id="4-8-加载原有模型并合并训练完得到的权重"><a href="#4-8-加载原有模型并合并训练完得到的权重" class="headerlink" title="4.8 加载原有模型并合并训练完得到的权重"></a>4.8 加载原有模型并合并训练完得到的权重</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, AutoModelForCausalLM<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-comment"># 模型下载</span><br><span class="hljs-keyword">from</span> modelscope <span class="hljs-keyword">import</span> snapshot_download<br>model_dir = snapshot_download(<span class="hljs-string">&#x27;Qwen/Qwen2.5-0.5B-Instruct&#x27;</span>)<br><br>tokenizer = AutoTokenizer.from_pretrained(model_dir)<br>model = AutoModelForCausalLM.from_pretrained(model_dir, torch_dtype=torch.float16)<br>model = model.cuda()<br><br><span class="hljs-keyword">from</span> peft <span class="hljs-keyword">import</span> PeftModel<br>lora_model = PeftModel.from_pretrained(model, model_id=<span class="hljs-string">&quot;lora_ft/checkpoint-5492&quot;</span>)<br><br>prompt = tokenizer(<span class="hljs-string">&quot;Human: &#123;&#125;\n&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;生成一个人们去野营旅行可能需要的十件物品的清单。&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).strip() + <span class="hljs-string">&quot;\n\nAssistant: &quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>).to(model.device)<br>response = tokenizer.decode(lora_model.generate(**prompt,max_length=<span class="hljs-number">256</span>,do_sample=<span class="hljs-literal">False</span>)[<span class="hljs-number">0</span>],skip_special_tokens=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(response)<br></code></pre></td></tr></table></figure><h4 id="4-9-保存微调后的模型"><a href="#4-9-保存微调后的模型" class="headerlink" title="4.9 保存微调后的模型"></a>4.9 保存微调后的模型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">output_model_dir = <span class="hljs-string">&quot;merge_model&quot;</span><br>mergemodel = lora_model.merge_and_unload()<br>mergemodel.save_pretrained(output_model_dir)<br>tokenizer.save_pretrained(output_model_dir)<br><br></code></pre></td></tr></table></figure><h4 id="4-10-使用微调后的模型"><a href="#4-10-使用微调后的模型" class="headerlink" title="4.10 使用微调后的模型"></a>4.10 使用微调后的模型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForCausalLM, AutoTokenizer<br>model_dir = <span class="hljs-string">&quot;merge_model&quot;</span><br><br>tokenizer = AutoTokenizer.from_pretrained(model_dir)<br>model = AutoModelForCausalLM.from_pretrained(model_dir)<br>model = model.cuda()<br><br>prompt = <span class="hljs-string">&quot;生成一个人们去野营旅行可能需要的十件物品的清单。&quot;</span><br><br>messages = [<br>    &#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;system&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;You are a helpful assistant.&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: prompt&#125;<br>]<br><br>text = tokenizer.apply_chat_template(<br>    messages,<br>    tokenize=<span class="hljs-literal">False</span>,<br>    add_generation_prompt=<span class="hljs-literal">True</span><br>)<br><br>model_inputs = tokenizer([text], return_tensors=<span class="hljs-string">&quot;pt&quot;</span>).to(model.device)<br><br>generated_ids = model.generate(<br>    **model_inputs,<br>    max_new_tokens=<span class="hljs-number">512</span><br>)<br><br>generated_ids = [<br>    output_ids[<span class="hljs-built_in">len</span>(input_ids):] <span class="hljs-keyword">for</span> input_ids, output_ids <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(model_inputs.input_ids, generated_ids)<br>]<br><br>response = tokenizer.batch_decode(generated_ids, skip_special_tokens=<span class="hljs-literal">True</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(response)<br><br></code></pre></td></tr></table></figure><p>本次微调大概需要25分钟，还是很快的，同时也会发现微调后针对同一个问题回答的效果更好了，当然这只是一个小的实验，仍然有很多工作可以去做。</p><h3 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5.参考资料"></a>5.参考资料</h3><ul><li>PEFT官网：<a href="https://hugging-face.cn/docs/peft/index">https://hugging-face.cn/docs/peft/index</a></li><li>transformer参考博客：<a href="https://jalammar.github.io/illustrated-transformer/">https://jalammar.github.io/illustrated-transformer/</a></li><li>lora论文：<a href="https://arxiv.org/abs/2106.09685">https://arxiv.org/abs/2106.09685</a></li><li>使用 PEFT 进行提示微调：<a href="https://huggingface.co/learn/cookbook/zh-CN/prompt_tuning_peft">https://huggingface.co/learn/cookbook/zh-CN/prompt_tuning_peft</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Langchain使用DeepSeek模型</title>
    <link href="/2025/01/04/Langchain%E4%BD%BF%E7%94%A8DeepSeek%E6%A8%A1%E5%9E%8B/"/>
    <url>/2025/01/04/Langchain%E4%BD%BF%E7%94%A8DeepSeek%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="1、什么是Langchain"><a href="#1、什么是Langchain" class="headerlink" title="1、什么是Langchain"></a>1、什么是Langchain</h2><p><code>Langchain</code>本质上是大模型开发的一个框架(framework)，它通过连接LLM和其他组件，如向量数据库、工具、提示工程，为应用程序赋能，使得应用程序能够具备上下文意识和推理能力。</p><h2 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h2><h3 id="2-1-直接使用pip安装"><a href="#2-1-直接使用pip安装" class="headerlink" title="2.1 直接使用pip安装"></a>2.1 直接使用<code>pip</code>安装</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> langchain-deepseek<br></code></pre></td></tr></table></figure><h3 id="2-2-从源码安装"><a href="#2-2-从源码安装" class="headerlink" title="2.2 从源码安装"></a>2.2 从源码安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/SyJarvis/langchain-deepseek<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> langchain_deepseek<br>pip install -e .<br></code></pre></td></tr></table></figure><h2 id="3、使用"><a href="#3、使用" class="headerlink" title="3、使用"></a>3、使用</h2><h3 id="3-0-前提"><a href="#3-0-前提" class="headerlink" title="3.0 前提"></a>3.0 前提</h3><p>创建一个.env文件，写入api_key</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">DEEPSEEK_API_KEY</span> = <span class="hljs-string">&quot;sk-...&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> dotenv <span class="hljs-keyword">import</span> load_dotenv, find_dotenv<br><br><span class="hljs-comment"># .env 存储api_key</span><br>load_dotenv()<br></code></pre></td></tr></table></figure><p>密钥可以从deepseek官网获取，链接如下：</p><ul><li><a href="https://platform.deepseek.com/">https://platform.deepseek.com</a></li></ul><h3 id="3-1-快速使用"><a href="#3-1-快速使用" class="headerlink" title="3.1 快速使用"></a>3.1 快速使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> langchain_deepseek <span class="hljs-keyword">import</span> ChatDeepSeekAI<br><br>llm = ChatDeepSeekAI(<br>model=<span class="hljs-string">&quot;deepseek-chat&quot;</span><br>)<br><br>response = llm.invoke(<span class="hljs-string">&quot;9.11和9.6哪个大&quot;</span>)<br><span class="hljs-built_in">print</span>(response.content)<br></code></pre></td></tr></table></figure><h3 id="3-2-进阶使用"><a href="#3-2-进阶使用" class="headerlink" title="3.2 进阶使用"></a>3.2 进阶使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> langchain_core.prompts <span class="hljs-keyword">import</span> ChatPromptTemplate<br><br>prompt = ChatPromptTemplate.from_messages([<br>    (<span class="hljs-string">&quot;system&quot;</span>, <span class="hljs-string">&quot;You are the technical writer&quot;</span>),<br>    (<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;&#123;input&#125;&quot;</span>)  <span class="hljs-comment"># &#123;input&#125;为变量</span><br>])<br><br><span class="hljs-comment"># 我们可以把prompt和具体llm的调用和在一起（通过chain，chain可以理解为sequence of calls to take）</span><br>api_key = <span class="hljs-string">&quot;sk-...&quot;</span><br>llm = ChatDeepSeekAI(<br>model=<span class="hljs-string">&quot;deepseek-chat&quot;</span>,<br>    api_key=api_key<br>)<br><br>chain = prompt | llm <br>response = chain.invoke(&#123;<span class="hljs-string">&quot;input&quot;</span>: <span class="hljs-string">&quot;9.11和9.6哪个大&quot;</span>&#125;)<br><span class="hljs-built_in">print</span>(response.content)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> langchain_core.output_parsers <span class="hljs-keyword">import</span> StrOutputParser<br><br>output_parser = StrOutputParser()  <span class="hljs-comment"># 输出string</span><br>chain = prompt | llm | output_parser<br>content = chain.invoke(&#123;<span class="hljs-string">&quot;input&quot;</span>: <span class="hljs-string">&quot;9.11和9.6哪个大&quot;</span>&#125;)<br><span class="hljs-built_in">print</span>(content)<br></code></pre></td></tr></table></figure><h2 id="4、参考资料"><a href="#4、参考资料" class="headerlink" title="4、参考资料"></a>4、参考资料</h2><ul><li><a href="https://github.com/SyJarvis/langchain-deepseek">https://github.com/SyJarvis/langchain-deepseek</a></li><li><a href="https://python.langchain.com/docs/introduction/">https://python.langchain.com/docs/introduction/</a></li><li><a href="https://api-docs.deepseek.com/zh-cn/">https://api-docs.deepseek.com/zh-cn/</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>RAG</tag>
      
      <tag>LLM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PolarisRAG框架的介绍</title>
    <link href="/2025/01/04/PolarisRAG%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D/"/>
    <url>/2025/01/04/PolarisRAG%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="一、RAG的介绍"><a href="#一、RAG的介绍" class="headerlink" title="一、RAG的介绍"></a>一、RAG的介绍</h2><p>RAG，全称为Retrieval-Augmented Generation[1]，中文为检索增强生成。它是一种结合了检索和生成的技术方法，将传统的基于检索的问答系统和基于大型语言生成模型的技术相结合，提升了AI系统在回答自然语言问题时的准确性和可靠性。</p><p><img src="/assets/rag_example.png" alt="图1:RAG流程图示例"></p><p>如图1所示，这是一个RAG系统的流程图，用户输入一个问题，系统将问题转换为向量，然后进入向量数据库查找与问题向量相关的资料，再将用户问题和问题相关资料组成一个prompt向量输入到大语言模型，大语言模型根据参考资料以及所写的提示来输出问题相关的答案。</p><h2 id="二、大模型知识更新的困境——大模型的幻觉"><a href="#二、大模型知识更新的困境——大模型的幻觉" class="headerlink" title="二、大模型知识更新的困境——大模型的幻觉"></a>二、大模型知识更新的困境——大模型的幻觉</h2><p>最先进的LLM都会接受大量的训练数据，将广泛的常识知识存储在其神经网络的权重中，也就是模型参数，但是，当我们在询问大模型生成训练数据之外的知识时，如实时性强的知识、特定领域的知识等，大模型的输出可能会导致事实不准确，这就是我们常说的大模型幻觉（Hallucination in large language models）[2]。作为一个术语，幻觉被泛化到模型出错的情况，在这里，需要将幻觉问题缩小到模型输出虚构且未由提供的上下文或世界知识支撑的情况。</p><p>大模型幻觉有两种类型：</p><ol><li>上下文幻觉：模型输出应与上下文的原内容一致</li><li>外在幻觉：模型输出应由预训练数据集进行归一化。然而，鉴于预训练数据集的大小，按生成内容检索和识别冲突的成本过高。如果我们把预训练数据语料库视为世界知识的代理，我们实际上是试图确保模型输出具有事实性且可由外部世界知识验证，以及当模型不知道某个事实时，它应该表明这一点。</li></ol><p>当我们把我们所有能搜集到的人类知识都当成预训练数据语料库喂给大模型的时候，我们是在想让它能够学习人类已有的知识，并且能够去解决一些问题，但通常这些知识都是互联网上公开的数据，我们也有很多的私域知识没有拿来训练。</p><h2 id="三、两种解决方法"><a href="#三、两种解决方法" class="headerlink" title="三、两种解决方法"></a>三、两种解决方法</h2><p>参数知识更新：大模型微调，我们通过如Lora[3]方法进行大模型微调，来调整大模型的网络权重，使其能够学习到新的知识。</p><p>非参数知识更新：RAG，增强检索生成，我们将模型的知识存储在外部知识源，如向量数据库、知识图谱，相当于给大模型外挂了一个知识库。</p><h2 id="四、PolarisRAG做了哪些工作"><a href="#四、PolarisRAG做了哪些工作" class="headerlink" title="四、PolarisRAG做了哪些工作"></a>四、PolarisRAG做了哪些工作</h2><p><img src="/assets/polarisrag.png" alt="polarisrag"></p><p>我们自己实现了一个开源的RAG框架，名字叫北极星RAG，目前已开源。能够上传pdf、md、docx等格式文档向量化存储到数据库，接入通义千问、智谱、GPT等大语言模型，也兼容openai的api方式及llama_cpp量化的gguf格式的大模型，以及本地部署的大模型，回答用户上传的文档资料相关的问题。</p><p>目前正在融合知识图谱，以及支持vllm方式部署的大模型，提升框架的运行速度，去探索更好的文档处理方式，如对文档建立实体关系的抽取、识别。</p><p>代码量已在1700行，正在加快兼容更多的大模型产商的模型和Huggingface、ModelScope开源的大模型。</p><p>GitHub仓库链接：<a href="https://github.com/SyJarvis/PolarisRAG">https://github.com/SyJarvis/PolarisRAG</a></p><h2 id="五、参考文献"><a href="#五、参考文献" class="headerlink" title="五、参考文献"></a>五、参考文献</h2><p>[1] Lewis P, Perez E, Piktus A, et al. Retrieval-augmented generation for knowledge-intensive nlp tasks[J]. Advances in Neural Information Processing Systems, 2020, 33: 9459-9474.<br>[2]Gekhman Z, Yona G, Aharoni R, et al. Does Fine-Tuning LLMs on New Knowledge Encourage Hallucinations?[J]. arXiv preprint arXiv:2405.05904, 2024.<br>[3] Hu E J, Shen Y, Wallis P, et al. Lora: Low-rank adaptation of large language models[J]. arXiv preprint arXiv:2106.09685, 2021.</p>]]></content>
    
    
    
    <tags>
      
      <tag>RAG</tag>
      
      <tag>LLM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>玩转Bert预训练模型-使用篇</title>
    <link href="/2024/12/08/%E7%8E%A9%E8%BD%ACBert%E9%A2%84%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B-%E4%BD%BF%E7%94%A8%E7%AF%87/"/>
    <url>/2024/12/08/%E7%8E%A9%E8%BD%ACBert%E9%A2%84%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B-%E4%BD%BF%E7%94%A8%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h2 id="1-什么是BERT？"><a href="#1-什么是BERT？" class="headerlink" title="1.什么是BERT？"></a>1.什么是BERT？</h2><p>BERT是Bidirectional Encoder Representation from Transformers的缩写，其意思是多Transformer的双向编码器表示法，在2018年10月由Google AI研究院发布的一种预训练模型，它与GPT模型都基于在《Attention Is All You Need》提出的Transformer结构，分别代表着两种基于Transformer架构的实现路子，其适用的任务是不同的，BERT使用了Transformer架构中的编码器，侧重于学习上下文相关的词表示，现在的Embedding Model是有基于BERT实现改进的，而GPT则使用了解码器。侧重于学习生成连贯文本的能力。</p><p>预训练模型，所有的预训练模型都是用大、超大的数据集训练后的网络模型，其已经可以使用了，但一般都是通用的，同时你也可以对其进行微调，这一实现是借鉴了计算机视觉领域的CNN神经网络的预训练。</p><p>BERT的论文：<a href="https://arxiv.org/abs/1810.04805">https://arxiv.org/abs/1810.04805</a></p><p>注：这里只做简要介绍，关于BERT的原理后续会写一篇文章做专门的介绍。</p><h2 id="2-BERT的配置"><a href="#2-BERT的配置" class="headerlink" title="2.BERT的配置"></a>2.BERT的配置</h2><p>BERT的研究人员在发布该模型时提出了两种标准配置</p><ul><li>BERT-base</li><li>BERT-large</li></ul><p>在中文领域的BERT，国内可以在modelscope上下载模型，来源于huggingface的备份，国外可以在huggingface上下载</p><ul><li>bert-base-chinese</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.modelscope.cn<span class="hljs-regexp">/models/</span>tiansz/bert-base-chinese<br>https:<span class="hljs-regexp">//</span>huggingface.co<span class="hljs-regexp">/google-bert/</span>bert-base-chinese<br></code></pre></td></tr></table></figure><p>BERT-base由12层编码器叠加而成。每层编码器都使用了12个注意力头，其中前馈神经网络层由768个隐藏神经元组成，所以从BERT-base得到的特征向量的大小是768。</p><h2 id="3-在BERT预训练模型上继续训练"><a href="#3-在BERT预训练模型上继续训练" class="headerlink" title="3.在BERT预训练模型上继续训练"></a>3.在BERT预训练模型上继续训练</h2><p>BERT模型是在一个巨大的语料库上针对两种特定任务进行预训练，分别是掩码语言模型构建和下局预测，这个巨大的语料库是多伦多图书语料库（Toronto BookCorpus）和维基百科数据集，在预训练完成之后，保存与训练好的BERT模型，对于一个新的任务，无须重新开始训练，而是为新任务微调其权重。</p><h2 id="4-下载BERT-base-chinese预训练模型"><a href="#4-下载BERT-base-chinese预训练模型" class="headerlink" title="4.下载BERT-base-chinese预训练模型"></a>4.下载BERT-base-chinese预训练模型</h2><h3 id="4-1在modelscope下载"><a href="#4-1在modelscope下载" class="headerlink" title="4.1在modelscope下载"></a>4.1在modelscope下载</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> modelscope<br></code></pre></td></tr></table></figure><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean">#模型下载<br><span class="hljs-keyword">from</span> modelscope <span class="hljs-keyword">import</span> snapshot_download<br>model_dir = snapshot_download(<span class="hljs-string">&#x27;tiansz/bert-base-chinese&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="4-2在huggingface下载"><a href="#4-2在huggingface下载" class="headerlink" title="4.2在huggingface下载"></a>4.2在huggingface下载</h3><h4 id="4-2-1配置国内镜像源"><a href="#4-2-1配置国内镜像源" class="headerlink" title="4.2.1配置国内镜像源"></a>4.2.1配置国内镜像源</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># linux</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">HF_ENDPOINT</span>=https://hf-mirror.com<br><span class="hljs-comment"># windows</span><br><span class="hljs-variable">$env</span>:HF_ENDPOINT = <span class="hljs-string">&quot;https://hf-mirror.com&quot;</span><br></code></pre></td></tr></table></figure><h4 id="4-2-2下载huggingface库"><a href="#4-2-2下载huggingface库" class="headerlink" title="4.2.2下载huggingface库"></a>4.2.2下载huggingface库</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pip</span> install huggingface-hub==<span class="hljs-number">0</span>.<span class="hljs-number">24</span>.<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h4 id="4-2-3使用huggingface-cli下载模型"><a href="#4-2-3使用huggingface-cli下载模型" class="headerlink" title="4.2.3使用huggingface-cli下载模型"></a>4.2.3使用huggingface-cli下载模型</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">huggingface-cli download <span class="hljs-params">--resume-download</span> google-bert/bert-base-chinese <span class="hljs-params">--local-dir</span> <span class="hljs-string">/mnt/e/huggingface_models/bert-base-chinese</span><br></code></pre></td></tr></table></figure><ul><li>–resume-download：参数为<code>模型的发布者/模型名称</code></li><li>–local-dir：指定保存路径</li></ul><h2 id="4-准备工作"><a href="#4-准备工作" class="headerlink" title="4.准备工作"></a>4.准备工作</h2><h3 id="4-1transformer库简要介绍"><a href="#4-1transformer库简要介绍" class="headerlink" title="4.1transformer库简要介绍"></a>4.1transformer库简要介绍</h3><p>在研究自然语言处理的过程中，存在一些问题，如数据集格式缺乏统一规范，更换不同的数据集，需要做复杂的数据适配的工作，这无疑是为研究增加了麻烦，在工程上也增加了项目的风险，与数据集相应，预训练模型也缺乏统一的规范，不同的实验室发布的模型，可能在下载方法、使用方式上都不尽相同，这不利于研究人员们进行研究和复现。</p><p>基于以上诉求，HuggingFace社区提供了<code>datasets</code>和<code>transformer</code>两套工具，分别用于数据集管理和模型管理，那在扩散模型上也有一套新的<code>diffusers</code>工具，这则是后话了，总之，transformer库提供了统一的模型接口，现在绝大多数开源的模型都可以使用transformer上使用，成为了一个事实上的标准。</p><h3 id="4-2下载transformer库"><a href="#4-2下载transformer库" class="headerlink" title="4.2下载transformer库"></a>4.2下载transformer库</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pip</span> install transformer==<span class="hljs-number">4</span>.<span class="hljs-number">39</span>.<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h2 id="5-BERT模型的使用"><a href="#5-BERT模型的使用" class="headerlink" title="5.BERT模型的使用"></a>5.BERT模型的使用</h2><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs capnproto"><span class="hljs-comment"># 导入transformer库中的BertModel类 加载BERT模型</span><br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertModel<br><span class="hljs-comment"># 导入transformer库中的BertTokenizer类 加载BERT编码工具</span><br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertTokenier<br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 模型的路径</span><br><span class="hljs-attr">pretrain_path</span> = <span class="hljs-string">&quot;/mnt/e/huggingface_models/bert-base-chinese/&quot;</span><br></code></pre></td></tr></table></figure><h3 id="5-1tokenizer编码工具的使用"><a href="#5-1tokenizer编码工具的使用" class="headerlink" title="5.1tokenizer编码工具的使用"></a>5.1tokenizer编码工具的使用</h3><h4 id="编码工具是如何工作的？"><a href="#编码工具是如何工作的？" class="headerlink" title="编码工具是如何工作的？"></a>编码工具是如何工作的？</h4><p>文字是一个抽象的概念，不是计算机擅长处理的数据单元，计算机擅长处理的是数字运算，所以需要把抽象的文字转换为数字，让计算机能够做数学运算。</p><h5 id="编码的工作流程有4个步骤："><a href="#编码的工作流程有4个步骤：" class="headerlink" title="编码的工作流程有4个步骤："></a>编码的工作流程有4个步骤：</h5><ol><li>定义字典</li><li>句子预处理</li><li>分词</li><li>编码</li></ol><h5 id="编码实现："><a href="#编码实现：" class="headerlink" title="编码实现："></a>编码实现：</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 定义字典</span><br>vocab = &#123;<br>    <span class="hljs-string">&#x27;&lt;SOS&gt;&#x27;</span>: 0,<br>    <span class="hljs-string">&#x27;&lt;EOS&gt;&#x27;</span>: 1,<br>    <span class="hljs-string">&#x27;the&#x27;</span>: 2,<br>    <span class="hljs-string">&#x27;quick&#x27;</span>: 3,<br>    <span class="hljs-string">&#x27;brown&#x27;</span>: 4,<br>    <span class="hljs-string">&#x27;fox&#x27;</span>: 5,<br>    <span class="hljs-string">&#x27;jumps&#x27;</span>: 6,<br>    <span class="hljs-string">&#x27;over&#x27;</span>: 7,<br>    <span class="hljs-string">&#x27;a&#x27;</span>: 8,<br>    <span class="hljs-string">&#x27;lazy&#x27;</span>: 9,<br>    <span class="hljs-string">&#x27;dog&#x27;</span>: 10,<br>&#125;<br><br><span class="hljs-comment"># 简单编码</span><br>sent = <span class="hljs-string">&#x27;the quick brown fox jumps over a lazy dog&#x27;</span><br>sent = <span class="hljs-string">&#x27;&lt;SOS&gt; &#x27;</span> + sent + <span class="hljs-string">&#x27; &lt;EOS&gt;&#x27;</span><br><span class="hljs-built_in">print</span>(sent)<br><br><span class="hljs-comment"># 分词，英文可以以空格分词，但是中文要是用jieba分词</span><br><span class="hljs-comment">#英文分词</span><br>words = sent.split()<br><span class="hljs-built_in">print</span>(words)<br><br><span class="hljs-comment">#编码为数字</span><br>encode = [vocab[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> words]<br><span class="hljs-built_in">print</span>(encode)<br></code></pre></td></tr></table></figure><h5 id="特殊符号的含义："><a href="#特殊符号的含义：" class="headerlink" title="特殊符号的含义："></a>特殊符号的含义：</h5><p>[CLS]：头部</p><p>[SEP]：尾部</p><p>[SEP]：中间</p><p>[PAD]：填空</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#简单编码</span><br>sent = <span class="hljs-string">&#x27;the quick brown fox jumps over a lazy dog&#x27;</span><br>sent = <span class="hljs-string">&#x27;&lt;SOS&gt; &#x27;</span> + sent + <span class="hljs-string">&#x27; &lt;EOS&gt;&#x27;</span><br><span class="hljs-built_in">print</span>(sent)<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 加载编码工具</span><br>tokenizer = BertTokenizer.from_pretrained(pretrain_path)<br><span class="hljs-comment"># 准备文本</span><br>sents = [<br>    <span class="hljs-string">&quot;科学技术是第一生产力&quot;</span>,<br>    <span class="hljs-string">&quot;我思故我在&quot;</span>,<br>    <span class="hljs-string">&quot;任何足够先进的科技，都与魔法无异&quot;</span><br>]<br><span class="hljs-comment"># 对文本进行编码，得到词嵌入向量</span><br>out = tokenizer.encode(<span class="hljs-attribute">text</span>=sents[0])<br><span class="hljs-built_in">print</span>(out)<br><span class="hljs-built_in">print</span>(len(out))<br><span class="hljs-built_in">print</span>(type(out))<br><br><span class="hljs-comment"># 对文本向量进行解码，得到原始文本</span><br>tokenizer.decode(out)<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">sen_code = tokenizer<span class="hljs-selector-class">.encode_plus</span>(<span class="hljs-string">&quot;让过去过去&quot;</span>, <span class="hljs-string">&quot;让未来到来&quot;</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(sen_code)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(tokenizer.convert_ids_to_tokens(sen_code[<span class="hljs-string">&#x27;input_ids&#x27;</span>])</span></span>)<br></code></pre></td></tr></table></figure><h3 id="5-2BERT的标记"><a href="#5-2BERT的标记" class="headerlink" title="5.2BERT的标记"></a>5.2BERT的标记</h3><ul><li>CLS标记</li><li>SEP标记</li></ul><h4 id="5-2-1-CLS标记"><a href="#5-2-1-CLS标记" class="headerlink" title="5.2.1 CLS标记"></a>5.2.1 CLS标记</h4><p>CLS标记，是Classify的缩写，是BERT用于表示句子级别的特殊标记，在BERT的训练过程中，CLS标记被用作整个句子的表示，它在句子中的位置是固定的，位于句子的最前面。通过训练，BERT可以学习到如何利用CLS标记来理解整个句子的语义信息。</p><h4 id="5-2-2-SEP标记"><a href="#5-2-2-SEP标记" class="headerlink" title="5.2.2 SEP标记"></a>5.2.2 SEP标记</h4><p>SEP标记，即Separator的缩写，在BERT中用于分隔不同的句子或者子句。在BERT的输入序列中，每个独立的句子或者子句都会被一个SEP标记所分隔。通过这种方式，BERT可以区分不同的句子或者子句，从而在训练过程中分别对它们进行学习。SEP标记的存在使得BERT可以处理多句子输入的情况，这对于许多实际应用场景来说是非常重要的。</p><h3 id="5-3BertModel模型的使用"><a href="#5-3BertModel模型的使用" class="headerlink" title="5.3BertModel模型的使用"></a>5.3BertModel模型的使用</h3><h4 id="简单使用方式"><a href="#简单使用方式" class="headerlink" title="简单使用方式"></a>简单使用方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 加载模型参数</span><br>model = BertModel.from_pretrained(pretrain_path)<br>sentence = <span class="hljs-string">&quot;让过去过去，让未来到来。&quot;</span><br><span class="hljs-comment"># 将文本编码为嵌入向量，return_tensors=&#x27;pt&#x27;表示输出pytorch张量</span><br>inputs = tokenizer(sentence, return_tensors=<span class="hljs-string">&#x27;pt&#x27;</span>)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">inputs = &#123;&quot;input_ids&quot;: [], &quot;token_type_ids&quot;: [], &#x27;attention_mask&#x27;: []&#125;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">with</span> torch.no_grad():<br><span class="hljs-comment"># 将输入给模型，设置输出隐藏层输出，输出注意力权重</span><br>    outputs = model(**inputs, output_hidden_states=<span class="hljs-literal">True</span>, output_attentions=<span class="hljs-literal">True</span>)<br><br>last_hidden_state = outputs.last_hidden_state<br>pooler_output = outputs.pooler_output<br>hidden_states = outputs.hidden_states<br></code></pre></td></tr></table></figure><ol><li><strong>last_hidden_state</strong>：shape是(batch_size, sequence_length, hidden_size)，hidden_size&#x3D;768，它是模型最后一层输出的隐藏状态。</li><li><strong>pooler_output</strong>：shape是(batch_size, hidden_size)，这是序列的第一个token(classification token)的最后一层的隐藏状态。</li><li><strong>hidden_states</strong>：这是一个输出可选项，在<code>BertModel</code>指定<code>output_hidden_states=True</code>，它是一个元组，第一个元素是embedding，其余元素是各层的输出，其余元素是12层transformer各层的输出，每个元素的形状是(batch_size, sequence_lenth, hidden_size)，共计13个元素，最后一个元素是last_hidden_state</li><li><strong>attentions</strong>：这是一个输出可选项，在<code>BertModel</code>指定<code>output_attentions=True</code>，它是一个元组，含有12个元素，包含每层的注意力权重，用于计算self-attention heads的加权平均值。</li></ol><h4 id="获取-CLS-token的嵌入"><a href="#获取-CLS-token的嵌入" class="headerlink" title="获取[CLS]token的嵌入"></a>获取[CLS]token的嵌入</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">cls_embedding = last_hidden_state<span class="hljs-selector-attr">[:, 0, :]</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(cls_embedding.shape)</span></span><br></code></pre></td></tr></table></figure><h4 id="剖析模型输入"><a href="#剖析模型输入" class="headerlink" title="剖析模型输入"></a>剖析模型输入</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">embedding_output = model<span class="hljs-selector-class">.embeddings</span>(<br>   input_ids=inputs<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;input_ids&#x27;</span>]</span><br>)<br>encoder_outputs = model<span class="hljs-selector-class">.encoder</span>(<br>    embedding_output,<br>    output_hidden_states=True<br>)<br>embedding_output == encoder_outputs<span class="hljs-selector-class">.hidden_states</span><span class="hljs-selector-attr">[0]</span><br></code></pre></td></tr></table></figure><h4 id="更复杂的一种使用方式-从预训练的BERT模型中提取嵌入"><a href="#更复杂的一种使用方式-从预训练的BERT模型中提取嵌入" class="headerlink" title="更复杂的一种使用方式-从预训练的BERT模型中提取嵌入"></a>更复杂的一种使用方式-从预训练的BERT模型中提取嵌入</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> transformers import BertModel, BertTokenizer<br>import torch<br><br><span class="hljs-comment"># 模型的路径</span><br>pretrain_path = <span class="hljs-string">&quot;/mnt/e/huggingface_models/bert-base-chinese/&quot;</span><br><br><span class="hljs-comment"># 编码工具</span><br>tokenizer = BertTokenizer.from_pretrained(pretrain_path)<br><span class="hljs-comment"># bert模型</span><br>model = BertModel.from_pretrained(pretrain_path)<br><br><span class="hljs-comment"># 定义输入句</span><br>sentence = <span class="hljs-string">&#x27;好好学习，天天向上。&#x27;</span><br><br><span class="hljs-comment"># 对该句进行分词</span><br>tokens = tokenizer.tokenize(sentence)<br><span class="hljs-built_in">print</span>(tokens)<br><br><span class="hljs-comment"># 添加标记</span><br>tokens = [<span class="hljs-string">&#x27;[CLS]&#x27;</span>] + tokens + [<span class="hljs-string">&#x27;[SEP]&#x27;</span>]<br><span class="hljs-built_in">print</span>(tokens)<br><span class="hljs-built_in">print</span>(len(tokens))<br><br><span class="hljs-comment"># 假设长度为15</span><br>tokens = tokens + [<span class="hljs-string">&#x27;[PAD]&#x27;</span>] + [<span class="hljs-string">&#x27;[PAD]&#x27;</span>] + [<span class="hljs-string">&#x27;[PAD]&#x27;</span>]<br><span class="hljs-built_in">print</span>(len(tokens))<br><br><span class="hljs-comment"># 创建注意力掩码，在有[PAD]标记的位置上，注意力掩码值为0，其他位置则为1</span><br>attention_mask = [1 <span class="hljs-keyword">if</span> i!=<span class="hljs-string">&#x27;[PAD]&#x27;</span> <span class="hljs-keyword">else</span> 0 <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tokens]<br><span class="hljs-built_in">print</span>(attention_mask)<br><br><span class="hljs-comment"># 将所有标记转换为对应的标记ID值</span><br>token_ids = tokenizer.convert_tokens_to_ids(tokens)<br><span class="hljs-built_in">print</span>(token_ids)<br><br><span class="hljs-comment"># 转换为张量</span><br>token_ids = torch.tensor(token_ids).unsqueeze(0)<br>attention_mask = torch.tensor(attention_mask).unsqueeze(0)<br><span class="hljs-built_in">print</span>(token_ids.shape)<br><span class="hljs-built_in">print</span>(attention_mask.shape)<br><br><span class="hljs-comment"># 获取嵌入向量</span><br>outputs = model(token_ids, <span class="hljs-attribute">attention_mask</span>=attention_mask, <span class="hljs-attribute">output_hidden_states</span>=<span class="hljs-literal">True</span>, <span class="hljs-attribute">output_attentions</span>=<span class="hljs-literal">True</span>)<br><br>last_hidden_state = outputs.last_hidden_state<br><span class="hljs-built_in">print</span>(last_hidden_state.shape)<br><br><span class="hljs-comment"># 第一个标记[CLS]的特征</span><br>last_hidden_state[0][0]<br><span class="hljs-comment"># 第二个标记好的特征</span><br>last_hidden_state[0][1]<br><br><span class="hljs-comment"># 判断第二个标记与第三个标记是不是相等</span><br>last_hidden_state[0][1] == last_hidden_state[0][1]<br></code></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li>BERT论文：<a href="https://arxiv.org/abs/1810.04805">https://arxiv.org/abs/1810.04805</a></li><li>【NLP基础知识-bert向量化】BERT模型输出pooler_output和last_hidden_state详解和用法：<a href="https://blog.csdn.net/lov1993/article/details/133696617">https://blog.csdn.net/lov1993/article/details/133696617</a></li><li>简明Jieba中文分词教程（分词、关键词提取、词性标注、计算位置）：<a href="https://blog.csdn.net/lty_sky/article/details/105567080">https://blog.csdn.net/lty_sky/article/details/105567080</a></li><li>BERT模型返回值：<a href="https://blog.csdn.net/sunyueqinghit/article/details/105157609">https://blog.csdn.net/sunyueqinghit/article/details/105157609</a></li><li>BERT基础教程 Transformer大模型实战 [印] 苏达哈尔桑·拉维昌迪兰（Sudharsan Ravichandiran）</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>LLM</tag>
      
      <tag>BERT</tag>
      
      <tag>Transformer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>玩转树莓派4B-部署LLM大模型</title>
    <link href="/2024/08/15/%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE4B-%E9%83%A8%E7%BD%B2LLM%E5%A4%A7%E6%A8%A1%E5%9E%8B/"/>
    <url>/2024/08/15/%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE4B-%E9%83%A8%E7%BD%B2LLM%E5%A4%A7%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​这几年人工智能很火，事实上，以1956年达特茅斯会议为节点开始，到现在人工智能经历了三次主要的浪潮，现在正是第三次浪潮。杰弗里·埃弗里斯特·辛顿（Geoffrey Everest Hinton）在2006年发表的一篇论文《A fast learning algorithm for deep belief nets》，标志着机器学习里的一个重要分支深度学习的出现，深度学习简单来说就是借鉴人脑的神经网络，搭建一个神经网络模型，具有输入层、隐藏层和一个输出层，让模型去学习人类输入进去的数据，得到经验。</p><p>​而真正引爆第三次人工智能浪潮的是2012年由辛顿（Hinton）和他的学生伊利亚・苏茨克沃（Ilya Sutskever）以及亚历克斯・克里切夫斯基（Alex Krizhevsky）设计出的AlexNet深度神经网络，第一次使用了nvidia的显卡进行矩阵的并行计算，表现出了GPU在深度神经网络训练上表现出的惊人能力。由此大家似乎看到了我们一直想要实现的可以自主学习的人工智能有了实现的可能。时至今日，在人工智能（Artificial Intelligence）这个领域已经产出了诸多的路线和理论。</p><p>​近两年比较火的便是LLM大语言模型，其属于NLP自然语言处理这个子领域，2017年由Google的研究人员发表了一篇论文，提出了一种名叫Transformer的序列建模神经网络架构，后续基于transformer的相关研究，则催生了两个最著名的Transformer模型类别：生成预训练Transformer——GPT和基于Transformer的双向编码器表示——BERT。后来在2022年年底由Openai发布的ChatGPT则引发了人们惊叹生成式AI的不可思议，到今天已经一年半过去，在这段时间里催生了诸多新的研究，可以乐观的想，是时候了，就趁现在。</p><p>​随着大模型不断的变小，人们希望大模型能够就在自己的手机里运行。下面我将演示在树莓派搭建一个qwen2 0.5b的模型推理服务，可以像调用OpenAI的服务一样使用。</p><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><ul><li>Raspberry Pi4 8G</li><li>Raspiois_arm64</li><li>llama.cpp</li><li>qwen2-0_5b-instruct-q5_k_m.gguf</li><li>modelscope</li></ul><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="1-安装python库"><a href="#1-安装python库" class="headerlink" title="1.安装python库"></a>1.安装python库</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pip3</span> install modelscope==<span class="hljs-number">1</span>.<span class="hljs-number">17</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">pip3</span> install openai==<span class="hljs-number">1</span>.<span class="hljs-number">30</span>.<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h3 id="2-下载qwen2模型"><a href="#2-下载qwen2模型" class="headerlink" title="2.下载qwen2模型"></a>2.下载qwen2模型</h3><p>由于huggingface在国内访问比较麻烦，可以考虑在modelscope上下载，这是由阿里云搭建的跟huggingface一样的平台。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//</span>www.modelscope.cn<span class="hljs-regexp">/models/</span>qwen<span class="hljs-regexp">/Qwen2-0.5B-Instruct-GGUF/</span>resolve<span class="hljs-regexp">/master/</span>qwen2-<span class="hljs-number">0</span>_5b-instruct-q5_k_m.gguf<br></code></pre></td></tr></table></figure><p>也可以使用modelscope来下载</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#模型下载</span><br><span class="hljs-keyword">from</span> modelscope import model_file_download<br>model_dir = model_file_download(<span class="hljs-attribute">model_id</span>=<span class="hljs-string">&#x27;qwen/Qwen2-0.5B-Instruct-GGUF&#x27;</span>,<br>                                <span class="hljs-attribute">file_path</span>=<span class="hljs-string">&#x27;qwen2-0_5b-instruct-q5_k_m.gguf&#x27;</span>,<br>                                <span class="hljs-attribute">revision</span>=<span class="hljs-string">&#x27;master&#x27;</span>,<br>                                <span class="hljs-attribute">cache_dir</span>=<span class="hljs-string">&#x27;/root/autodl-tmp&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="3-下载llama-cpp"><a href="#3-下载llama-cpp" class="headerlink" title="3.下载llama.cpp"></a>3.下载llama.cpp</h3><h4 id="3-1下载代码仓库"><a href="#3-1下载代码仓库" class="headerlink" title="3.1下载代码仓库"></a>3.1下载代码仓库</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">https</span>://github.com/ggerganov/llama.cpp<br></code></pre></td></tr></table></figure><h4 id="3-2-编译"><a href="#3-2-编译" class="headerlink" title="3.2 编译"></a>3.2 编译</h4><p>这里的编译是CPU编译，对于有CUDA等GPU推理的环境可以针对相应的硬件进行编译。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> llama.cpp<br><span class="hljs-keyword">make</span><br></code></pre></td></tr></table></figure><p>也可以使用cmake编译</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">cmake -<span class="hljs-keyword">B </span><span class="hljs-keyword">build</span><br><span class="hljs-keyword"></span>cmake --<span class="hljs-keyword">build </span><span class="hljs-keyword">build </span>--<span class="hljs-built_in">config</span> Release<br></code></pre></td></tr></table></figure><p>使用make编译后的文件就在当前目录下，使用cmake编译后的文件在<code>build/bin</code>目录下</p><p>编译成功后可看见</p><p><img src="/assets/1723693962870.png" alt="1723693962870"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="1-使用llama-cpp实现模型推理对话"><a href="#1-使用llama-cpp实现模型推理对话" class="headerlink" title="1.使用llama.cpp实现模型推理对话"></a>1.使用llama.cpp实现模型推理对话</h3><p>此处使用cmake编译，需要进入build&#x2F;bin目录，如果使用make编译，注意相对路径的问题</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-symbol">./llama-cli</span> <span class="hljs-operator">-</span>m <span class="hljs-symbol">/home/pi/qwen2-0_5b-instruct-q5_k_m.gguf</span> <span class="hljs-operator">-</span>n <span class="hljs-number">512</span> <span class="hljs-operator">-</span>co <span class="hljs-operator">-</span>i <span class="hljs-operator">-</span><span class="hljs-keyword">if</span> <span class="hljs-operator">-</span>f <span class="hljs-symbol">../../prompts/chat-with-qwen.txt</span> <span class="hljs-operator">-</span>-<span class="hljs-keyword">in</span>-prefix <span class="hljs-string">&quot;&lt;|im_start|&gt;user<span class="hljs-char escape_">\n</span>&quot;</span> <span class="hljs-operator">-</span>-<span class="hljs-keyword">in</span>-suffix <span class="hljs-string">&quot;&lt;|im_end|&gt;<span class="hljs-char escape_">\n</span>&lt;|im_start|&gt;assistant<span class="hljs-char escape_">\n</span>&quot;</span> <span class="hljs-operator">-</span>ngl <span class="hljs-number">24</span> <span class="hljs-operator">-</span>fa<br></code></pre></td></tr></table></figure><p><img src="/assets/1723694573609.png" alt="1723694573609"></p><h3 id="2-使用llama-cpp实现模型推理服务"><a href="#2-使用llama-cpp实现模型推理服务" class="headerlink" title="2.使用llama.cpp实现模型推理服务"></a>2.使用llama.cpp实现模型推理服务</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./llama-server</span> -m <span class="hljs-string">/home/pi/qwen2-0_5b-instruct-q5_k_m.gguf</span> -n 1024 <span class="hljs-params">--host</span> 0.0.0.0 <span class="hljs-params">--port</span> 8000<br></code></pre></td></tr></table></figure><p><img src="/assets/1723694707529.png" alt="1723694707529"></p><h3 id="3-使用openai调用推理服务"><a href="#3-使用openai调用推理服务" class="headerlink" title="3.使用openai调用推理服务"></a>3.使用openai调用推理服务</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import openai<br><span class="hljs-built_in">print</span>(openai.__version__)<br><span class="hljs-comment"># &#x27;1.30.1&#x27;</span><br><br><span class="hljs-keyword">from</span> openai import OpenAI<span class="hljs-built_in"></span><br><span class="hljs-built_in">client </span>= OpenAI(<span class="hljs-attribute">base_url</span>=<span class="hljs-string">&quot;http://localhost:8000/v1&quot;</span>,<br>                <span class="hljs-attribute">api_key</span>=<span class="hljs-string">&quot;sk-no-key-required&quot;</span>)<br><br>messages=[<br>    &#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;system&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;你是一个乐于助人的助手&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;太阳系有几大行星，分别是哪几个&quot;</span>&#125;<br>]<br><br>completion = client.chat.completions.create(<span class="hljs-attribute">model</span>=<span class="hljs-string">&quot;gpt-3.5.turbo&quot;</span>, <span class="hljs-attribute">messages</span>=messages)<br><br><span class="hljs-built_in">print</span>(completion.choices[0].message)<br></code></pre></td></tr></table></figure><p><img src="/assets/1723695268760.png" alt="1723695268760"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>人工智能简史（第2版） 尼克</li><li>llama.cpp构建：<a href="https://github.com/ggerganov/llama.cpp/blob/master/docs/build.md">https://github.com/ggerganov/llama.cpp/blob/master/docs/build.md</a></li><li>入门必读，写给初学者的人工智能简史：<a href="https://www.ithome.com/0/784/577.htm">https://www.ithome.com/0/784/577.htm</a></li><li>神经网络之父Hinton介绍及其论文介绍：<a href="https://blog.csdn.net/zephyr_wang/article/details/120392050">https://blog.csdn.net/zephyr_wang/article/details/120392050</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>LLM</tag>
      
      <tag>树莓派</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/07/08/hello-world/"/>
    <url>/2023/07/08/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
